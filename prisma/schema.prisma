
generator client {
    provider = "prisma-client-js"
}
// npx prisma db push
// npm prisma migrate dev --name dname
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              Member    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         Member     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model  Member {
    @@index([email ])
    @@unique([email, id])
    id            String    @id @default(cuid())
    firstname          String
    lastname          String
    maritalStatus          String
    madienName          String
    nationality          String
    membershipRegNo          String

    address          String
    phone1          String
    phone2          String
    email         String?   @unique

    state          State @relation("State", fields: [stateId], references: [id])
    stateId     String

    lga           Lga @relation("Lga", fields: [lgaId], references: [id])
    lgaId          String

    ward           Ward @relation("Ward", fields: [wardId], references: [id])
    wardId          String

    pollingUnit           PollingUnit @relation("PollingUnit", fields: [pollingUnitId], references: [id])
    pollingUnitId String

    nin          String
    dob          DateTime
    gender          DateTime
   
    emailVerified DateTime?
    image         String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    accounts      Account[]
    sessions      Session[]
    nominationForm NominationForm[] @relation("CandidateForm")
    formNominated NominationForm[] @relation("FormNominated")


    
}   


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model State {
    id String    @id @default(cuid())
    name String @unique
    capital String
    code String
    members Member[] @relation("State")

}
model Lga {
    id String    @id @default(cuid())
    name String 
    code String
 members Member[]  @relation("Lga")
}

model Ward {
    id String    @id @default(cuid())
    name String 
    code String
 members Member[]  @relation("Ward")
}

model PollingUnit {
    id String    @id @default(cuid())
    name String 
    code String
 members Member[]  @relation("PollingUnit")
}

model Institution {
     id String    @id @default(cuid())
    institutionsAttended String
}

model NominationForm {
    @@index([dateApproved, dateSigned ])

    id String    @id @default(cuid())
    dateSigned DateTime
    dateApproved DateTime

    position Position @default(HOSUE_OF_REP)

    member Member[] @relation("CandidateForm")
    nominatedBy Member[]  @relation("FormNominated")

    institution String[]
    workExperience Json

    politicalHistory String
    politicalAppointment String?
    otherUsefulInfo String?

    pendingCriminalTrial Boolean
    pendingCriminalActReason String?

    everBeenLunatic Boolean
    everBeenLunaticReason String?

    everBeenConvicted Boolean
    everBeenConvictedReason String?

    everBeenDeclearedBankrupt Boolean
    everBeenDeclearedBankruptReason String?

     
}

enum Position {
   PRESIDENTIAL
   SENATORIAL
   GUBERNATORIAL
   HOSUE_OF_REP
}